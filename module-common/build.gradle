plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java-library'
}

group = 'dev.be'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/*
    api가 아닌 implementation로 선언하면
    dev.be.moduleapi.service.DemoService.memberRepository가 JpaRepository의 메소드를 사용하지 못한다.
    */

	/*
    api 키워드를 사용하기 위해선 2가지 중 1가지 방법으로 선언을 해야 한다.

    1. api를 사용하려는 build.gradle의 plugins에 `id 'java-library'` 추가
    2. 상위 모듈(=root)에서 'java-library' 추가
    ex) subprojects {
            apply plugin: 'java-library'
        }
     */

	api 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

}

tasks.named('test') {
	useJUnitPlatform()
}


tasks.bootJar {enabled = false}
tasks.jar {enabled = true}